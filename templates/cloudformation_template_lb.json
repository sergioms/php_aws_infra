{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "AWS CloudFormation Template for PHP Webserver",
  
  "Parameters" : {
    "S3BucketPrefix": {
         "Description" : "S3 Bucket Prefix",
         "Type": "String",
         "Default": "alb_log"
    },    
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "devsecops_test_instances",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },    
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    } 
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t2.micro"    : { "Arch" : "NATHVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "eu-central-1"     : {"HVM64" : "ami-0cfbf4f6db41068ac", "HVMG2" : "ami-0aa1822e3eb913a11"}
    },
    "Region2ELBAccountId": {
      "eu-west-1"      : { "AccountId": "156460612806" },
      "eu-west-2"      : { "AccountId": "652711504416" },
      "eu-west-3"      : { "AccountId": "009996457667" },
      "eu-central-1"   : { "AccountId": "054676820928" },
      "eu-north-1"     : { "AccountId": "897822967062" }
    },
  },
    
  "Resources" : {
       "S3Bucket": {
            "Type": "AWS::S3::Bucket"
# Enable for production, define lifecycle policy
#           "DeletionPolicy": "Retain", 
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "PublicReadForGetBucketObjects",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "arn:aws:iam::054676820928:root"
# TODO use mapping to retrieve AccountId
#                                "AWS" : {
#                                "Fn::Join": [
#                                    "",
#                                    [
#                                        "arn:aws:iam::",
#                                        { "Ref": "S3Bucket" },
#                                        { "Fn::FindInMap": [ "Region2ELBAccountId", { "Ref": "AWS::Region" }, { "AccountId" } ] },
#                                        ":root"
#                                    ]
#                                ]		
#                             }								
                            },
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        { "Ref": "S3Bucket" },
                                        "/",
                                        { "Ref": "S3BucketPrefix" },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "S3Bucket"
                }
            }
        },
    "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
            "CidrBlock": "10.0.0.0/16",
            "Tags": [
                    {
                    "Key": "Application",
                    "Value": { "Ref": "AWS::StackId"}
                    }
            ]
        }
    },
    "Subnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": "10.0.1.0/24",
            "MapPublicIpOnLaunch" : "true",
            "AvailabilityZone" : "eu-central-1a",
            "Tags": [
                    {
                    "Key": "Application",
                    "Value": { "Ref": "AWS::StackId"}
                    }
            ]
        }
    },
    "Subnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": "10.0.2.0/24",
            "MapPublicIpOnLaunch" : "true",
            "AvailabilityZone" : "eu-central-1b",
            "Tags": [
                    {
                    "Key": "Application",
                    "Value": { "Ref": "AWS::StackId"}
                    }
            ]
        }
    },
    "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
            "Tags": [
                    {
                    "Key": "Application",
                    "Value": { "Ref": "AWS::StackId" }
                    }
            ]
        }
    },
    "AttachGateway": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
            "VpcId": { "Ref": "VPC" },
            "InternetGatewayId": { "Ref": "InternetGateway" }
        }
    },
    "RouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": { "Ref": "VPC" },
            "Tags": [
                    {
                     "Key": "Application",
                     "Value": { "Ref": "AWS::StackId"}
                    }
            ]
        }
    },
    "RouteTable2": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": { "Ref": "VPC" },
            "Tags": [
                    {
                     "Key": "Application",
                     "Value": { "Ref": "AWS::StackId"}
                    }
            ]
        }
    },
    "Route": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "InternetGateway",
        "Properties": {
            "RouteTableId": {
                "Ref": "RouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
                "Ref": "InternetGateway"
            }
        }
    },
    "Route2": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "InternetGateway",
        "Properties": {
            "RouteTableId": {
                "Ref": "RouteTable2"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
                "Ref": "InternetGateway"
            }
        }
    },
    "SubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "Subnet"
            },
            "RouteTableId": {
                "Ref": "RouteTable"
            }
        }
    },
    "SubnetRouteTableAssociation2": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "Subnet2"
            },
            "RouteTableId": {
                "Ref": "RouteTable2"
            }
        }
    },    
    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref": "Subnet" },{ "Ref": "Subnet2" }],
        "SecurityGroups": [{"Ref": "ALBSecurityGroup"}],
        "LoadBalancerAttributes" :
        [ 
            { "Key" : "access_logs.s3.enabled", "Value" : "true" },
            { "Key" : "access_logs.s3.bucket", "Value" : { "Ref" : "S3Bucket" }},
            { "Key" : "access_logs.s3.prefix", "Value" :  { "Ref": "S3BucketPrefix" } }
        ]
       },
       "DependsOn": "S3Bucket"
    },

    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        } ],
        "VpcId": { "Ref": "VPC" }
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },
    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Matcher": {
            "HttpCode": "200"
        },
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VPC"},
        "Targets" : [ 
          {
            "Id" :  {"Ref" : "WebServerInstance"},
            "Port" : "80" 
          },
          {
            "Id" :  {"Ref" : "WebServerInstance2"},
            "Port" : "80" 
          }
        ],
        "TargetGroupAttributes" : 
          [ { "Key" : "deregistration_delay.timeout_seconds", "Value" : "300" }
        ]
      }
    },
    "WebServerInstance": {  
       "Type": "AWS::EC2::Instance",
       "Properties": {
         "ImageId" : "ami-0cc0a36f626a4fdf5",
         "InstanceType"   : { "Ref" : "InstanceType" },
         "SubnetId": { "Ref": "Subnet" },
         "Tenancy": "default",
         "KeyName"        : { "Ref" : "KeyName" },
         "SecurityGroupIds": [{"Ref": "InstanceSecurityGroup"}],
         "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash -xe\n",
              "sudo apt-get update\n",
              "sudo apt-get install -y apache2\n",
              "sudo apt-get install -y php libapache2-mod-php\n",
              "sudo chown -R ubuntu:ubuntu /var/www/html/\n"
         ]]}}        
       }
    },
    "WebServerInstance2": {  
       "Type": "AWS::EC2::Instance",
       "Properties": {
         "ImageId" : "ami-0cc0a36f626a4fdf5",
         "InstanceType"   : { "Ref" : "InstanceType" },
         "SubnetId": { "Ref": "Subnet2" },
         "Tenancy": "default",
         "KeyName"        : { "Ref" : "KeyName" },
         "SecurityGroupIds": [{"Ref": "InstanceSecurityGroup"}],
         "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash -xe\n",
              "sudo apt-get update\n",
              "sudo apt-get install -y apache2\n",
              "sudo apt-get install -y php libapache2-mod-php\n",
              "sudo chown -R ubuntu:ubuntu /var/www/html/\n"
         ]]}}        
       }
    },
   
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress": [ 
        {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "SSHLocation" }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {"Ref": "ALBSecurityGroup"}
        }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "Waf" : {
       "Type" : "AWS::CloudFormation::Stack",
       "DependsOn" : [ S3Bucket ],
       "Properties" : {
       "TemplateURL": "https://lamba-waf-php-infra-eu-central-1.s3.eu-central-1.amazonaws.com/aws-waf-security-automations/v2.3.0/aws-waf-security-automations.template",
       "Parameters": {
          "EndpointType" : "ALB",
          "ActivateSqlInjectionProtectionParam": "no",
          "ActivateCrossSiteScriptingProtectionParam": "yes",
          "ActivateHttpFloodProtectionParam": "no",
          "ActivateScannersProbesProtectionParam": "no",
          "ActivateReputationListsProtectionParam": "no",
          "ActivateBadBotProtectionParam": "no"
        }
    }
  },
  "MyWebACLAssociation": {
     "Type": "AWS::WAFRegional::WebACLAssociation",
     "Properties": {
     "ResourceArn": { "Ref": "ApplicationLoadBalancer" },
     "WebACLId": { "Fn::GetAtt" : [ "Waf", "Outputs.WAFWebACL" ]}
    }
   }
  },
  
  "Outputs": {
    "URL": {
      "Description": "URL of the website",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ApplicationLoadBalancer", "DNSName" ] } ] ] }
     },
    "PublicIp" : {
      "Value" : { "Fn::GetAtt" : [ "WebServerInstance", "PublicIp" ]},
      "Description" : "Server's public ip Address"
    },
    "PublicIp2" : {
      "Value" : { "Fn::GetAtt" : [ "WebServerInstance2", "PublicIp" ]},
      "Description" : "Server2's public ip Address"
    },
    "LogsBucket": {
            "Value": { "Ref" : "S3Bucket"},
            "Description": "URL for website hosted on S3"
        },
    "ARNLogsBucket": {
        "Value": 
            {
            "Fn::GetAtt": [
                "S3Bucket",
                "Arn"
                ]
            },
        "Description": "Name of S3 bucket to hold website content"
    } 
  }
}